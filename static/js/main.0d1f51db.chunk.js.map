{"version":3,"sources":["divs/Divs.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["divs","props","react_default","a","createElement","className","children","number","App","state","feed","count","rating","reports","downloads","time","showDivs","toggleHandler","doesShow","_this","setState","_this2","this","setInterval","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","Promise","all","fetch","then","_ref2","_ref3","slicedToArray","res1","res2","res3","res4","res5","res6","json","_ref4","_ref5","data","stop","names","titles","console","log","map","i","index","divs_Divs","src","logo","alt","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0d1f51db.chunk.js","sourcesContent":["import React from 'react';\nimport './Divs.css';\n\n\n\nconst divs = (props) => {\n    return (\n    <div className=\"Box1\">\n        <p>{props.children}</p>\n        <p>{props.number}</p>\n    </div>\n    )}\n\nexport default divs;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Divs from './divs/Divs';\n\n\n\n\n\n\nclass App extends Component {\n  state = {\n    feed:[],\n    count:[],\n    rating:[],\n    reports:[],\n    downloads:[],\n    time:[],\n\n    showDivs: false\n  }\n\n\n\n  // componentDidMount(){\n  //   setInterval(async () => {\n  //   this.getProducts();\n  //   this.getCount();\n  //   this.getRating();\n  //   this.getReports();\n  //   this.getDownloads();\n  //   this.getTime();\n  //   },10000);\n  // }\n\n\n  componentDidMount(){\n    setInterval(async () => {\n    Promise.all([\n      fetch('http://18.191.231.245:4000/feed'),\n      fetch('http://18.191.231.245:4000/count'),\n      fetch('http://18.191.231.245:4000/rating'),\n      fetch('http://18.191.231.245:4000/reports'),\n      fetch('http://18.191.231.245:4000/downloads'),\n      fetch('http://18.191.231.245:4000/tottime')\n    ])\n    .then(([res1, res2,res3,res4, res5,res6]) => Promise.all([res1.json(), res2.json(),res3.json(), res4.json(),res5.json(), res6.json()]))\n    .then(([res1, res2,res3,res4, res5,res6]) => this.setState({\n      feed: res1.data, \n      count: res2.data,\n      rating: res3.data, \n      reports: res4.data,\n      downloads: res5.data, \n      time: res6.data\n    }));\n  },10000);\n}\n\n\n\n  // getProducts = _ =>{\n  //   fetch('http://18.191.231.245:4000/feed')\n  //   .then(response => response.json())\n  //   .then(response => this.setState({feed: response.data}))\n  //   .catch(err => console.error(err))\n  // }\n\n  // getCount = _ =>{\n  //   fetch('http://18.191.231.245:4000/count')\n  //   .then(response => response.json())\n  //   .then(response => this.setState({count: response.data}))\n  //   .catch(err => console.error(err))\n  // }\n\n  // getRating = _ =>{\n  //   fetch('http://18.191.231.245:4000/rating')\n  //   .then(response => response.json())\n  //   .then(response => this.setState({rating: response.data}))\n  //   .catch(err => console.error(err))\n  // }\n\n  // getReports = _ =>{\n  //   fetch('http://18.191.231.245:4000/reports')\n  //   .then(response => response.json())\n  //   .then(response => this.setState({reports: response.data}))\n  //   .catch(err => console.error(err))\n  // }\n\n  // getDownloads = _ =>{\n  //   fetch('http://18.191.231.245:4000/downloads')\n  //   .then(response => response.json())\n  //   .then(response => this.setState({downloads: response.data}))\n  //   .catch(err => console.error(err))\n  // }\n\n  // getTime = _ =>{\n  //   fetch('http://18.191.231.245:4000/tottime')\n  //   .then(response => response.json())\n  //   .then(response => this.setState({time: response.data}))\n  //   .catch(err => console.error(err))\n  // }\n\n  toggleHandler = () => {\n    const doesShow = this.state.showDivs;\n    this.setState({showDivs: !doesShow})\n  }\n\n\n  render() {\n\n    let names = [this.state.feed, this.state.count,\n                this.state.rating, this.state.reports,\n                this.state.downloads, this.state.time];\n    let titles = ['Feedback Count:','Count of Visits:','Current Rating:','Downloaded Reports:','Downloaded Datasets:','Hours On:']\n\n    console.log(names);\n\n    let divs = null;\n\n    if (this.state.showDivs){\n      divs = (\n        <div>\n\n          {names.map((i,index) => {\n            \n            return <Divs number ={i.map( i => <p>{i.count}</p>) }>{titles[index]}</Divs>\n            \n          })}\n\n        {/* <Divs number ={names[0].map( i => <p>{i.count}</p>) }>Feedback Count:</Divs>\n\n        <Divs number ={this.state.count.map( i => <p>{i.count}</p>) }>Count of Visits:</Divs>\n\n        <Divs number ={this.state.rating.map( i => <p>{i.count}</p>) }>Current Rating:</Divs>\n\n        <Divs number ={this.state.reports.map( i => <p>{i.count}</p>) }>Downloaded Reports:</Divs>\n\n        <Divs number ={this.state.downloads.map( i => <p>{i.count}</p>) }>Downloaded Datasets:</Divs>\n\n        <Divs number ={this.state.time.map( i => <p>{i.count}</p>) }>Hours On:</Divs> */}\n\n      </div> \n\n      );\n    }\n\n\n    \n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">TLC Data Hub Monitor</h1>\n        </header>\n\n        <button onClick = {this.toggleHandler}>Switch</button>\n\n        {divs}\n\n         \n\n      </div>\n    );\n  }\n\n\n\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}